{"version":3,"sources":["Utils/LocalUserInfo.js","Utils/ObjectSplitter.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectWriter.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectOpener.js","ProjectsStorage/LocalFileStorageProvider/index.js","ResourcesList/LocalResourceSources.js","ResourcesList/LocalResourceExternalEditors.js","ResourcesList/LocalPiskelBridge.js","ResourcesList/LocalJfxrBridge.js","ResourcesList/LocalYarnBridge.js","Export/LocalExporters/LocalPreviewLauncher/index.js","Export/LocalExporters/LocalPreviewLauncher/LocalNetworkPreviewDialog.js","Export/LocalExporters/LocalPreviewLauncher/LocalPreviewDebuggerServer.js","Export/LocalExporters/index.js","Export/LocalExporters/LocalCordovaExport.js","Export/LocalExporters/LocalElectronExport.js","Export/LocalExporters/LocalHTML5Export.js","Export/LocalExporters/LocalFacebookInstantGamesExport.js","UI/LocalFilePicker/index.js","Export/LocalExporters/LocalOnlineCordovaExport.js","Export/LocalExporters/LocalOnlineElectronExport.js","Export/LocalExporters/LocalOnlineWebExport.js","MainFrame/ElectronMainMenu.js","JsExtensionsLoader/LocalJsExtensionsLoader.js","JsExtensionsLoader/LocalJsExtensionsFinder.js","EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener.js","GameEngineFinder/LocalGDJSDevelopmentWatcher.js","ProjectCreation/services/LocalCreation.js","Utils/RetryIfFailed.js","ProjectsStorage/ResourceFetcher/LocalResourceFetcher.js","LocalApp.js","Export/LocalExporters/LocalFileSystem.js","Utils/LocalArchiver.js","Export/LocalExporters/LocalFileUploader.js"],"names":["os","optionalRequire","getUID","userInfo","uid","e","split","object","pathSeparator","getArrayItemReferenceName","shouldSplit","isReferenceMagicPropertyName","partialObjects","createReference","reference","push","splitObject","currentObject","currentPath","currentReference","Array","isArray","index","itemPath","partialObject","name","itemReference","propertyName","propertyPath","propertyReference","unsplit","getReferencePartialObject","maxUnsplitDepth","unsplitObject","depth","undefined","Promise","resolve","keys","Object","all","map","indexOrPropertyName","isReference","referenceTo","then","splitPaths","paths","path","has","getSlugifiedUniqueNameFromProperty","existingNamesForReference","property","Error","newName","newNameGenerator","slugs","gd","global","fs","remote","dialog","checkFileContent","filePath","expectedContent","time","performance","now","reject","readFile","encoding","err","content","verificationTime","console","info","toFixed","writeAndCheckFile","a","ensureDir","dirname","writeFile","writeAndCheckFormattedJSONFile","JSON","stringify","writeProjectFiles","project","projectPath","serializedProjectObject","serializeToJSObject","isFolderProject","Set","join","catch","error","onSaveProject","fileMetadata","fileIdentifier","wasSaved","onSaveProjectAs","defaultPath","fileSystem","assignIn","AbstractFileSystemJS","localFileSystem","browserWindow","getCurrentWindow","options","filters","extensions","showSaveDialogSync","ProjectResourcesCopier","copyAllResourcesTo","setProjectFile","onAutoSaveProject","autoSavePath","serializeToJSON","readJSONFile","filepath","data","dataObject","parse","ex","onOpenWithPicker","showOpenDialog","title","properties","message","filePaths","length","onOpen","referencePath","hasAutoSave","compareLastModified","existsSync","statSync","mtime","getTime","onGetAutoSave","internalName","getFileMetadataFromAppArguments","appArguments","POSITIONAL_ARGUMENTS_KEY","createOperations","getOpenErrorMessage","localResourceSources","allResourceKindsAndMetadata","kind","fileExtensions","displayName","createNewResource","displayTab","selectResourcesHeadless","i18n","getLastUsedPath","setLastUsedPath","multiSelection","getProjectFile","latestPath","_","lastUsedPath","dir","outsideProjectFolderPaths","filter","isPathInProjectFolder","Window","showConfirmDialog","copyAllToProjectFolder","newResource","setFile","relative","setName","renderComponent","editors","edit","sendExternalEditorOpened","openPiskel","openJfxr","openYarn","electron","ipcRenderer","resourceNames","resourcesLoader","singleFrame","onChangesSaved","extraOptions","resources","resourceName","originalIndex","resourcePath","getLocalResourceFullPath","externalEditorData","removeAllListeners","on","event","outputResources","newAnimationName","metadata","pskl","resourcesManager","getResourcesManager","forEach","resource","createOrUpdateResource","ImageResource","getResource","setMetadata","send","newFilePath","AudioResource","jfxr","JsonResource","LocalPreviewLauncher","canDoNetworkPreview","canDoHotReload","state","networkPreviewDialogOpen","networkPreviewHost","networkPreviewPort","networkPreviewError","previewGamePath","previewBrowserWindowOptions","hotReloadsCount","hideMenuBar","alwaysOnTop","_networkPreviewSubscriptionChecker","_hotReloadSubscriptionChecker","_openPreviewBrowserWindow","invoke","previewGameIndexHtmlPath","_openPreviewWindow","gamePath","setState","width","getGameResolutionWidth","height","getGameResolutionHeight","useContentSize","getName","backgroundColor","webPreferences","webSecurity","nodeIntegration","contextIsolation","getIsMenuBarHiddenInPreview","getIsAlwaysOnTopInPreview","networkPreview","serverParams","port","setTimeout","_checkSubscriptionForNetworkPreview","ipAddress","root","_prepareExporter","findGDJS","gdjsRoot","outputDir","getTempDir","exporter","Exporter","launchPreview","previewOptions","layout","externalLayout","getPreviewDebuggerServer","startServer","timeFunction","previewExportOptions","PreviewExportOptions","setLayoutName","setExternalLayoutName","previewDebuggerServerAddress","getDebuggerServerAddress","useWebsocketDebuggerClientWithServerAddress","address","includeFileHashs","props","getIncludeFileHashs","includeFile","hash","setIncludeFileHash","setElectronRemoteRequirePath","debuggerIds","getExistingDebuggerIds","shouldHotReload","hotReload","setProjectDataOnlyExport","projectDataOnlyExport","setFullLoadingScreen","fullLoadingScreen","exportProjectForPixiPreview","delete","debuggerId","sendMessage","command","checkHasSubscription","localPreviewDebuggerServer","this","ref","subscriptionChecker","onChangeSubscription","id","mode","open","url","onClose","onExport","onRunPreviewLocally","React","LocalNetworkDialog","actions","label","primary","onClick","secondaryActions","cannotBeDismissed","onRequestClose","value","fullWidth","debuggerServerState","debuggerServerAddress","callbacksList","serverStartPromise","serverStartPromiseCompleted","onErrorReceived","debuggerIdIndex","indexOf","splice","onConnectionClosed","onConnectionOpened","onServerStateChanged","parsedMessage","onHandleParsedMessage","warn","serverStartTimeoutPromise","race","getServerState","registerCallbacks","callbacks","callbacksIndex","localOnlineWebExporter","onlineWebExporter","exportPipeline","localOnlineWebExportPipeline","localAutomatedExporters","html5Exporter","localHTML5ExportPipeline","onlineCordovaExporter","localOnlineCordovaExportPipeline","onlineElectronExporter","localOnlineElectronExportPipeline","facebookInstantGamesExporter","localFacebookInstantGamesExportPipeline","localManualExporters","cordovaExporter","localCordovaExportPipeline","electronExporter","localElectronExportPipeline","shell","packageNameWarningType","getInitialExportState","getLastCompilationDirectory","canLaunchBuild","exportState","isNavigationDisabled","renderHeader","updateExportState","noMargin","type","onChange","setLastCompilationDirectory","renderLaunchButtonLabel","prepareExporter","context","launchExport","exportOptions","MapStringBoolean","set","exportWholePixiProject","launchResourcesDownload","exportOutput","launchCompression","renderDoneFooter","openExportFolder","openPath","renderGameButton","app","archiveOutputFilename","getPath","temporaryOutputDir","mkDir","clearDir","archiveLocalFolder","outputFilename","styles","container","position","display","alignItems","button","marginLeft","textField","flex","LocalFilePicker","onChooseFolder","showSaveDialog","style","margin","hintText","PureComponent","onlineBuildType","limitedBuilds","targets","keystore","signingDialogOpen","errored","exportStep","includes","archiveOutputDir","tmpdir","launchUpload","outputFile","getBuildFileUploadOptions","uploadOptions","uploadLocalFile","updateStepProgress","key","launchOnlineBuild","authenticatedUser","uploadBucketKey","gameId","getAuthorizationHeader","firebaseUser","buildCordovaAndroid","buildElectron","renderCustomStepsProgress","build","sizeLimit","buildWeb","useIPCEventListener","ipcEvent","func","handler","eventArgs","removeListener","ElectronMainMenu","recentProjectFiles","onOpenRecentFile","shortcutMap","useShortcutMap","language","onChooseProject","onCloseProject","onCloseApp","onExportProject","onCreateProject","onOpenProjectManager","onOpenHomePage","onOpenDebugger","onOpenAbout","onOpenPreferences","onOpenLanguage","onOpenProfile","onOpenGamesDashboard","setUpdateStatus","fileTemplate","submenu","accelerator","getElectronAccelerator","onClickSendEvent","item","enabled","isMacLike","editTemplate","role","viewTemplate","windowTemplate","helpTemplate","onClickOpenLink","template","unshift","buildAndSendMenuTemplate","useCommandWithOptions","generateOptions","text","loadExtension","require","findJsExtensionModules","module","exports","objectsEditorService","objectsRenderingService","filterExamples","onFindGDJS","loadAllExtensions","extensionModulePaths","extensionModulePath","extensionModule","rethrowException","result","rawError","registerEditorConfigurations","registerInstanceRenderers","JsPlatform","get","extensionsRoot","readdir","extensionFolders","filteredExtensionFolders","folder","extensionFolder","extensionFolderPath","jsExtensionModulePath","stat","stats","isFile","modulePaths","modulePath","makeLocalEventsFunctionCodeWriter","onWriteFile","mkdir","code","getPathFor","codeNamespace","getIncludeFileFor","writeFunctionCode","functionCodeNamespace","writeBehaviorCode","behaviorCodeNamespace","LocalEventsFunctionsExtensionWriter","chooseEventsFunctionExtensionFile","extensionName","writeEventsFunctionsExtension","extension","stringifyException","writeJSONFile","LocalEventsFunctionsExtensionOpener","readEventsFunctionExtensionFile","LocalGDJSDevelopmentWatcher","shouldWatch","PreferencesContext","values","useGDJSDevelopmentWatcher","onCreateBlank","settings","projectName","outputPath","mkdirsSync","showErrorBox","errorId","ProjectHelper","createNewGDJSProject","sendNewGameCreated","exampleUrl","exampleSlug","storageProvider","LocalFileStorageProvider","onCreateFromExampleShortHeader","exampleShortHeader","getExample","example","axios","projectFileUrl","responseType","transformResponse","response","projectFileContent","localFilePath","slug","retryIfFailed","fn","times","tries","latestError","latestReturnValue","getResourcesToFetch","getAllResourceNames","toJSArray","filename","getFile","startsWith","fetchResources","onProgress","baseAssetsPath","downloadedFilePaths","erroredResources","fetchedResources","fetchedResourcesCount","resourcesToFetch","PromisePool","withConcurrency","for","process","extname","filenameWithoutExtension","basename","tentativePath","newPath","add","replace","LocalResourceFetcher","create","authentication","setUpContextMenu","getArguments","isDev","disableCheckForUpdates","makeEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","resourceFetcher","storageProviders","defaultStorageProvider","getStorageProviderOperations","initialFileMetadataToOpen","getStorageProvider","renderMainMenu","renderPreviewLauncher","renderExportDialog","automatedExporters","manualExporters","renderCreateDialog","initialTab","renderGDJSDevelopmentWatcher","resourceSources","resourceExternalEditors","localResourceExternalEditors","extensionsLoader","makeExtensionsLoader","ObjectsEditorService","ObjectsRenderingService","LocalFileSystem","dirExists","emptyDirSync","fileNameFrom","fullPath","_isExternalUrl","_translateUrl","dirNameFrom","makeAbsolute","baseDirectory","isAbsolute","normalize","makeRelative","charAt","copyFile","source","dest","copySync","writeToFile","file","contents","outputFileSync","readFileSync","toString","readDir","ext","toUpperCase","output","VectorString","readdirSync","push_back","fileExists","substr","lazyRequireArchiver","optionalLazyRequire","archiver","createWriteStream","archive","zlib","level","fileSize","pointer","log","roundFileSizeInMb","Math","round","pipe","directory","finalize","stepCurrentProgress","stepMaxProgress"],"mappings":"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","file":"static/js/local-app.d79cf2a6.chunk.js","sourcesContent":["// @flow\nimport optionalRequire from './OptionalRequire';\nconst os = optionalRequire('os');\n\nexport const getUID = () => {\n  try {\n    return os.userInfo().uid;\n  } catch (e) {\n    return '';\n  }\n};\n","// @flow\n// TODO: This module could be published on npm if useful.\nimport newNameGenerator from './NewNameGenerator';\nimport slugs from 'slugs';\n\ntype PartialObjectDescription = {|\n  reference: string,\n  object: Object,\n|};\n\ntype Reference = {\n  referenceTo: string,\n};\n\ntype SplitConfiguration = {|\n  pathSeparator: string,\n  getArrayItemReferenceName: (\n    object: Object,\n    currentReference: string\n  ) => string,\n  shouldSplit: (path: string) => boolean,\n  isReferenceMagicPropertyName: string,\n|};\n\ntype UnsplitConfiguration = {|\n  isReferenceMagicPropertyName: string,\n  getReferencePartialObject: (referencePath: string) => Promise<Object>,\n  maxUnsplitDepth?: number,\n|};\n\n/**\n * Mutate the given object to split it into multiple partial objects.\n * Partial objects will be replaced by references.\n *\n * @param object The object to be split.\n * @param configuration Configuration to be used to split the object.\n */\nexport const split = (\n  object: Object,\n  {\n    pathSeparator,\n    getArrayItemReferenceName,\n    shouldSplit,\n    isReferenceMagicPropertyName,\n  }: SplitConfiguration\n): Array<PartialObjectDescription> => {\n  const partialObjects = [];\n  const createReference = (reference, object): Reference => {\n    partialObjects.push({\n      reference,\n      object,\n    });\n\n    return {\n      [isReferenceMagicPropertyName]: true,\n      referenceTo: reference,\n    };\n  };\n\n  const splitObject = (\n    currentObject: Object,\n    currentPath: string,\n    currentReference: string\n  ) => {\n    if (currentObject !== null && typeof currentObject === 'object') {\n      if (Array.isArray(currentObject)) {\n        for (let index in currentObject) {\n          const itemPath = currentPath + pathSeparator + '*';\n          if (shouldSplit(itemPath)) {\n            const partialObject = currentObject[index];\n            const name = getArrayItemReferenceName(\n              partialObject,\n              currentReference\n            );\n            const itemReference = currentReference + pathSeparator + name;\n\n            currentObject[index] = createReference(\n              itemReference,\n              partialObject\n            );\n\n            splitObject(partialObject, itemPath, itemReference);\n          } else {\n            const itemReference = currentReference + pathSeparator + index;\n\n            splitObject(currentObject[index], itemPath, itemReference);\n          }\n        }\n      } else {\n        for (let propertyName in currentObject) {\n          const propertyPath = currentPath + pathSeparator + propertyName;\n          const propertyReference =\n            currentReference + pathSeparator + propertyName;\n          if (shouldSplit(propertyPath)) {\n            const partialObject = currentObject[propertyName];\n\n            currentObject[propertyName] = createReference(\n              propertyReference,\n              partialObject\n            );\n\n            splitObject(partialObject, propertyPath, propertyReference);\n          } else {\n            splitObject(\n              currentObject[propertyName],\n              propertyPath,\n              propertyReference\n            );\n          }\n        }\n      }\n    }\n  };\n\n  splitObject(object, '', '');\n  return partialObjects;\n};\n\n/**\n * Mutate the given object to recompose it from partial objects.\n * References to partial objects will be fetched as needed.\n *\n * @param object The object to be unsplit.\n * @param configuration Configuration to be used to unsplit the object.\n */\nexport const unsplit = (\n  object: Object,\n  {\n    isReferenceMagicPropertyName,\n    getReferencePartialObject,\n    maxUnsplitDepth,\n  }: UnsplitConfiguration\n): Promise<void> => {\n  const isReference = (object: Object): ?Reference => {\n    if (object[isReferenceMagicPropertyName] === true) {\n      return object;\n    }\n\n    return null;\n  };\n\n  const unsplitObject = (\n    currentObject: Object,\n    depth: number\n  ): Promise<void> => {\n    if (maxUnsplitDepth !== undefined && depth >= maxUnsplitDepth) {\n      return Promise.resolve();\n    }\n\n    if (currentObject !== null && typeof currentObject === 'object') {\n      const keys = Object.keys(currentObject);\n      if (keys) {\n        return Promise.all(\n          keys.map(indexOrPropertyName => {\n            const reference = isReference(currentObject[indexOrPropertyName]);\n            if (reference) {\n              return getReferencePartialObject(reference.referenceTo).then(\n                partialObject => {\n                  currentObject[indexOrPropertyName] = partialObject;\n\n                  return unsplitObject(\n                    currentObject[indexOrPropertyName],\n                    depth + 1\n                  );\n                }\n              );\n            }\n\n            return unsplitObject(currentObject[indexOrPropertyName], depth + 1);\n          })\n        ).then(() => {});\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  return unsplitObject(object, 0);\n};\n\n/**\n * A helper that can be used to split according to a list of hardcoded paths\n */\nexport const splitPaths = (paths: Set<string>) => {\n  return (path: string) => paths.has(path);\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getNameFromProperty = (propertyName: string) => {\n  return (object: Object): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    return property;\n  };\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getSlugifiedUniqueNameFromProperty = (propertyName: string) => {\n  const existingNamesForReference = {};\n\n  return (object: Object, currentReference: string): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    existingNamesForReference[currentReference] =\n      existingNamesForReference[currentReference] || {};\n    const newName = newNameGenerator(\n      slugs(property),\n      name => !!existingNamesForReference[currentReference][name]\n    );\n    existingNamesForReference[currentReference][newName] = true;\n    return newName;\n  };\n};\n","// @flow\nimport { serializeToJSObject, serializeToJSON } from '../../Utils/Serializer';\nimport { type FileMetadata } from '../index';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  split,\n  splitPaths,\n  getSlugifiedUniqueNameFromProperty,\n} from '../../Utils/ObjectSplitter';\nimport localFileSystem from '../../Export/LocalExporters/LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\n\nconst gd: libGDevelop = global.gd;\n\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst checkFileContent = (filePath: string, expectedContent: string) => {\n  const time = performance.now();\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, { encoding: 'utf8' }, (err, content) => {\n      if (err) return reject(err);\n\n      if (content === '') {\n        reject(new Error(`Written file is empty, did the write fail?`));\n      }\n      if (content !== expectedContent) {\n        reject(\n          new Error(\n            `Written file is not containing the expected content, did the write fail?`\n          )\n        );\n      }\n      const verificationTime = performance.now() - time;\n      console.info(\n        `Verified ${filePath} content in ${verificationTime.toFixed()}ms.`\n      );\n      resolve();\n    });\n  });\n};\n\nexport const writeAndCheckFile = async (\n  content: string,\n  filePath: string\n): Promise<void> => {\n  if (!fs) throw new Error('Filesystem is not supported.');\n  if (content === '')\n    throw new Error('The content to save on disk is empty. Aborting.');\n\n  await fs.ensureDir(path.dirname(filePath));\n\n  await fs.writeFile(filePath, content);\n  await checkFileContent(filePath, content);\n};\n\nconst writeAndCheckFormattedJSONFile = async (\n  object: Object,\n  filePath: string\n): Promise<void> => {\n  const content = JSON.stringify(object, null, 2);\n  await writeAndCheckFile(content, filePath);\n};\n\nconst writeProjectFiles = (\n  project: gdProject,\n  filePath: string,\n  projectPath: string\n): Promise<void> => {\n  const serializedProjectObject = serializeToJSObject(project);\n  if (project.isFolderProject()) {\n    const partialObjects = split(serializedProjectObject, {\n      pathSeparator: '/',\n      getArrayItemReferenceName: getSlugifiedUniqueNameFromProperty('name'),\n      shouldSplit: splitPaths(\n        new Set([\n          '/layouts/*',\n          '/externalLayouts/*',\n          '/externalEvents/*',\n          '/layouts/*',\n          '/eventsFunctionsExtensions/*',\n        ])\n      ),\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n    });\n\n    return Promise.all(\n      partialObjects.map(partialObject => {\n        return writeAndCheckFormattedJSONFile(\n          partialObject.object,\n          path.join(projectPath, partialObject.reference) + '.json'\n        ).catch(err => {\n          console.error('Unable to write a partial file:', err);\n          throw err;\n        });\n      })\n    ).then(() => {\n      return writeAndCheckFormattedJSONFile(\n        serializedProjectObject,\n        filePath\n      ).catch(err => {\n        console.error('Unable to write the split project:', err);\n        throw err;\n      });\n    });\n  } else {\n    return writeAndCheckFormattedJSONFile(\n      serializedProjectObject,\n      filePath\n    ).catch(err => {\n      console.error('Unable to write the project:', err);\n      throw err;\n    });\n  }\n};\n\nexport const onSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: FileMetadata,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  if (!filePath) {\n    return Promise.reject(\n      'Project file is empty, \"Save as\" should have been called?'\n    );\n  }\n\n  const projectPath = path.dirname(filePath);\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return { wasSaved: true, fileMetadata }; // Save was properly done\n  });\n};\n\nexport const onSaveProjectAs = (\n  project: gdProject,\n  fileMetadata: ?FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: ?FileMetadata,\n|}> => {\n  const defaultPath = fileMetadata ? fileMetadata.fileIdentifier : '';\n  const fileSystem = assignIn(new gd.AbstractFileSystemJS(), localFileSystem);\n  const browserWindow = remote.getCurrentWindow();\n  const options = {\n    defaultPath,\n    filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n  };\n\n  if (!dialog) {\n    return Promise.reject('Unsupported');\n  }\n  const filePath = dialog.showSaveDialogSync(browserWindow, options);\n  if (!filePath) {\n    return Promise.resolve({ wasSaved: false, fileMetadata });\n  }\n  const projectPath = path.dirname(filePath);\n\n  // TODO: Ideally, errors while copying resources should be reported.\n  gd.ProjectResourcesCopier.copyAllResourcesTo(\n    project,\n    fileSystem,\n    projectPath,\n    true, // Update the project with the new resource paths\n    false, // Don't move absolute files\n    true // Keep relative files folders structure.\n  );\n\n  // Update the project with the new file path (resources have already been updated)\n  project.setProjectFile(filePath);\n\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return {\n      wasSaved: true,\n      fileMetadata: {\n        ...fileMetadata,\n        fileIdentifier: filePath,\n      },\n    }; // Save was properly done\n  });\n};\n\nexport const onAutoSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<void> => {\n  const autoSavePath = fileMetadata.fileIdentifier + '.autosave';\n  return writeAndCheckFile(serializeToJSON(project), autoSavePath).catch(\n    err => {\n      console.error(`Unable to write ${autoSavePath}:`, err);\n      throw err;\n    }\n  );\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { type FileMetadata } from '../index';\nimport { unsplit } from '../../Utils/ObjectSplitter';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport const onOpenWithPicker = (): Promise<?FileMetadata> => {\n  if (!dialog) return Promise.reject('Not supported');\n  const browserWindow = remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: 'Open a project',\n      properties: ['openFile'],\n      message:\n        'If you want to open your GDevelop 4 project, be sure to save it as a .json file',\n      filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return null;\n      return { fileIdentifier: filePaths[0] };\n    });\n};\n\nexport const onOpen = (\n  fileMetadata: FileMetadata\n): Promise<{|\n  content: Object,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const projectPath = path.dirname(filePath);\n  return readJSONFile(filePath).then(object => {\n    return unsplit(object, {\n      getReferencePartialObject: referencePath => {\n        return readJSONFile(path.join(projectPath, referencePath) + '.json');\n      },\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n      // Limit unsplitting to depth 3 (which would allow properties of layouts/external layouts/external events\n      // to be un-splitted, but not the content of these properties), to avoid very slow processing\n      // of large game files.\n      maxUnsplitDepth: 3,\n    }).then(() => {\n      return { content: object };\n    });\n  });\n};\n\nexport const hasAutoSave = (\n  fileMetadata: FileMetadata,\n  compareLastModified: boolean\n): Promise<boolean> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const autoSavePath = filePath + '.autosave';\n  if (fs.existsSync(autoSavePath)) {\n    if (!compareLastModified) {\n      return Promise.resolve(true);\n    }\n    try {\n      const autoSavedTime = fs.statSync(autoSavePath).mtime.getTime();\n      const saveTime = fs.statSync(filePath).mtime.getTime();\n      if (autoSavedTime > saveTime) {\n        return Promise.resolve(true);\n      }\n    } catch (err) {\n      console.error('Unable to compare *.autosave to project', err);\n      return Promise.resolve(false);\n    }\n    return Promise.resolve(false);\n  }\n  return Promise.resolve(false);\n};\n\nexport const onGetAutoSave = (fileMetadata: FileMetadata) => {\n  return Promise.resolve({\n    ...fileMetadata,\n    fileIdentifier: fileMetadata.fileIdentifier + '.autosave',\n  });\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { type StorageProvider } from '../index';\nimport {\n  onOpenWithPicker,\n  onOpen,\n  hasAutoSave,\n  onGetAutoSave,\n} from './LocalProjectOpener';\nimport {\n  onSaveProject,\n  onSaveProjectAs,\n  onAutoSaveProject,\n} from './LocalProjectWriter';\nimport {\n  type AppArguments,\n  POSITIONAL_ARGUMENTS_KEY,\n} from '../../Utils/Window';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\n\n/**\n * Use the Electron APIs to provide access to the native\n * file system (with native save/open dialogs).\n */\nexport default ({\n  internalName: 'LocalFile',\n  name: t`Local file system`,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    return {\n      fileIdentifier: appArguments[POSITIONAL_ARGUMENTS_KEY][0],\n    };\n  },\n  createOperations: () => ({\n    onOpenWithPicker,\n    onOpen,\n    hasAutoSave,\n    onSaveProject,\n    onSaveProjectAs,\n    onAutoSaveProject,\n    onGetAutoSave,\n    getOpenErrorMessage: (error: Error): MessageDescriptor => {\n      return t`Check that the file exists, that this file is a proper game created with GDevelop and that you have the authorizations to open it.`;\n    },\n  }),\n}: StorageProvider);\n","// @flow\nimport { t } from '@lingui/macro';\nimport {\n  type ResourceSource,\n  allResourceKindsAndMetadata,\n} from './ResourceSource';\nimport { isPathInProjectFolder, copyAllToProjectFolder } from './ResourceUtils';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport Window from '../Utils/Window';\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\nconst path = optionalRequire('path');\n\nconst localResourceSources: Array<ResourceSource> = [\n  ...allResourceKindsAndMetadata.map(\n    ({ kind, displayName, fileExtensions, createNewResource }) => ({\n      name: 'local-file-opener-' + kind,\n      displayName: t`Choose a file`,\n      displayTab: 'import',\n      kind,\n      selectResourcesHeadless: async ({\n        i18n,\n        getLastUsedPath,\n        setLastUsedPath,\n        project,\n        options,\n      }) => {\n        if (!dialog)\n          throw new Error('Electron dialog not supported in this environment.');\n\n        const properties = ['openFile'];\n        if (options.multiSelection) properties.push('multiSelections');\n\n        const projectPath = path.dirname(project.getProjectFile());\n        const latestPath = getLastUsedPath(project, kind) || projectPath;\n\n        const browserWindow = remote.getCurrentWindow();\n        let { filePaths } = await dialog.showOpenDialog(browserWindow, {\n          title: i18n._(t`Choose a file`),\n          properties,\n          filters: [\n            { name: i18n._(t`Supported files`), extensions: fileExtensions },\n          ],\n          defaultPath: latestPath,\n        });\n        if (!filePaths || !filePaths.length) return [];\n\n        const lastUsedPath = path.parse(filePaths[0]).dir;\n        setLastUsedPath(project, kind, lastUsedPath);\n\n        const outsideProjectFolderPaths = filePaths.filter(\n          path => !isPathInProjectFolder(project, path)\n        );\n\n        if (outsideProjectFolderPaths.length) {\n          const answer = Window.showConfirmDialog(\n            i18n._(\n              t`This/these file(s) are outside the project folder. Would you like to make a copy of them in your project folder first (recommended)?`\n            )\n          );\n\n          if (answer) {\n            filePaths = await copyAllToProjectFolder(project, filePaths);\n          }\n        }\n\n        return filePaths.map(filePath => {\n          const newResource = createNewResource();\n          const projectPath = path.dirname(project.getProjectFile());\n          newResource.setFile(path.relative(projectPath, filePath));\n          newResource.setName(path.relative(projectPath, filePath));\n\n          return newResource;\n        });\n      },\n      renderComponent: () => null,\n    })\n  ),\n];\n\nexport default localResourceSources;\n","// @flow\nimport { openPiskel } from './LocalPiskelBridge';\nimport { openJfxr } from './LocalJfxrBridge';\nimport { openYarn } from './LocalYarnBridge';\nimport { type ResourceExternalEditor } from './ResourceExternalEditor.flow';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\n\n/**\n * This is the list of editors that can be used to edit resources\n * on Electron runtime.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    displayName: 'Edit with Piskel',\n    kind: 'image',\n    edit: options => {\n      sendExternalEditorOpened('piskel');\n      return openPiskel(options);\n    },\n  },\n  {\n    name: 'Jfxr',\n    displayName: 'Create/Edit a Sound effect with Jfxr (*.wav)',\n    kind: 'audio',\n    edit: options => {\n      sendExternalEditorOpened('jfxr');\n      return openJfxr(options);\n    },\n  },\n  {\n    name: 'Yarn',\n    displayName: 'Create/Edit a Dialogue Tree with Yarn (*.json)',\n    kind: 'json',\n    edit: options => {\n      sendExternalEditorOpened('yarn');\n      return openYarn(options);\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open Piskel editor for the specified resources.\n * Take a list of resource names to be edited and will call the callback methods\n * (notably onChangesSaved with the name of the edited resources)\n */\nexport const openPiskel = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  singleFrame,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n\n  const resources = resourceNames.map((resourceName, originalIndex) => {\n    let resourcePath = getLocalResourceFullPath(project, resourceName);\n    return {\n      resourcePath,\n      resourceName,\n      originalIndex,\n    };\n  });\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const externalEditorData = {\n    ...extraOptions,\n    resources,\n    singleFrame,\n    projectPath,\n  };\n\n  // Listen to events meaning that edition in Piskel is finished\n  ipcRenderer.removeAllListeners('piskel-changes-saved');\n  ipcRenderer.on(\n    'piskel-changes-saved',\n    (event, outputResources, newAnimationName, externalEditorData) => {\n      const metadata = externalEditorData.data\n        ? { pskl: externalEditorData }\n        : null;\n\n      const resourcesManager = project.getResourcesManager();\n      outputResources.forEach(resource => {\n        resource.name = path.relative(projectPath, resource.path); // Still needed for onChangesSaved()\n        createOrUpdateResource(project, new gd.ImageResource(), resource.name);\n      });\n\n      outputResources[0].metadata = metadata;\n      outputResources[0].newAnimationName = newAnimationName;\n      // in case this is for a single frame object, save the metadata in the Image object\n      if (externalEditorData.singleFrame) {\n        if (metadata) {\n          resourcesManager\n            .getResource(path.relative(projectPath, outputResources[0].path))\n            .setMetadata(JSON.stringify(metadata));\n        }\n        onChangesSaved(outputResources);\n      } else {\n        // In case there are multiple frames, pass back the metadata to the editor and let it store it at an appropriate place.\n        // (For example, for sprites, SpritesList.js will save it in the metadata of the gd.Direction).\n\n        onChangesSaved(outputResources);\n      }\n    }\n  );\n\n  // Issue the event to open piskel\n  ipcRenderer.send('piskel-open-then-load-animation', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open JFXR to create wav resources.\n */\nexport const openJfxr = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('jfxr-changes-saved');\n  ipcRenderer.on(\n    'jfxr-changes-saved',\n    (event, newFilePath, externalEditorData) => {\n      const name = path.relative(projectPath, newFilePath);\n      createOrUpdateResource(project, new gd.AudioResource(), name);\n\n      const metadata = {\n        jfxr: externalEditorData,\n      };\n      project\n        .getResourcesManager()\n        .getResource(name)\n        .setMetadata(JSON.stringify(metadata));\n      onChangesSaved([{ metadata, name }]);\n    }\n  );\n\n  ipcRenderer.send('jfxr-create-wav', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open YARN to Create/Edit Json Dialogue Tree resources.\n */\nexport const openYarn = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('yarn-changes-saved');\n  ipcRenderer.on('yarn-changes-saved', (event, newFilePath) => {\n    const name = path.relative(projectPath, newFilePath);\n    createOrUpdateResource(project, new gd.JsonResource(), name);\n    onChangesSaved([{ name }]);\n  });\n\n  ipcRenderer.send('yarn-create-json', externalEditorData);\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport localFileSystem from '../LocalFileSystem';\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport { timeFunction } from '../../../Utils/TimeFunction';\nimport { findGDJS } from '../../../GameEngineFinder/LocalGDJSFinder';\nimport LocalNetworkPreviewDialog from './LocalNetworkPreviewDialog';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport SubscriptionChecker from '../../../Profile/SubscriptionChecker';\nimport {\n  getDebuggerServerAddress,\n  localPreviewDebuggerServer,\n} from './LocalPreviewDebuggerServer';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n  onChangeSubscription?: () => void,\n|};\n\ntype State = {|\n  networkPreviewDialogOpen: boolean,\n  networkPreviewHost: ?string,\n  networkPreviewPort: ?number,\n  networkPreviewError: ?any,\n  hotReloadsCount: number,\n  previewGamePath: ?string,\n  previewBrowserWindowOptions: ?{\n    width: number,\n    height: number,\n    useContentSize: boolean,\n    title: string,\n    backgroundColor: string,\n  },\n  hideMenuBar: boolean,\n  alwaysOnTop: boolean,\n|};\n\nexport default class LocalPreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => true;\n  canDoHotReload = () => true;\n\n  state = {\n    networkPreviewDialogOpen: false,\n    networkPreviewHost: null,\n    networkPreviewPort: null,\n    networkPreviewError: null,\n    previewGamePath: null,\n    previewBrowserWindowOptions: null,\n    hotReloadsCount: 0,\n    hideMenuBar: true,\n    alwaysOnTop: true,\n  };\n  _networkPreviewSubscriptionChecker: ?SubscriptionChecker = null;\n  _hotReloadSubscriptionChecker: ?SubscriptionChecker = null;\n\n  _openPreviewBrowserWindow = () => {\n    const { previewGamePath, previewBrowserWindowOptions } = this.state;\n    if (!previewBrowserWindowOptions || !previewGamePath) return;\n\n    if (!ipcRenderer) return;\n\n    ipcRenderer.invoke('preview-open', {\n      previewBrowserWindowOptions,\n      previewGameIndexHtmlPath: `file://${previewGamePath}/index.html`,\n      alwaysOnTop: this.state.alwaysOnTop,\n      hideMenuBar: this.state.hideMenuBar,\n    });\n  };\n\n  _openPreviewWindow = (\n    project: gdProject,\n    gamePath: string,\n    options: PreviewOptions\n  ): void => {\n    this.setState(\n      {\n        previewBrowserWindowOptions: {\n          width: project.getGameResolutionWidth(),\n          height: project.getGameResolutionHeight(),\n          useContentSize: true,\n          title: `Preview of ${project.getName()}`,\n          backgroundColor: '#000000',\n          webPreferences: {\n            webSecurity: false, // Allow to access to local files,\n            // Allow Node.js API access in renderer process, as long\n            // as we've not removed dependency on it and on \"@electron/remote\".\n            nodeIntegration: true,\n            contextIsolation: false,\n          },\n        },\n        previewGamePath: gamePath,\n        hideMenuBar: !options.getIsMenuBarHiddenInPreview(),\n        alwaysOnTop: options.getIsAlwaysOnTopInPreview(),\n      },\n      () => {\n        if (!options.networkPreview) {\n          this._openPreviewBrowserWindow();\n        } else {\n          if (!ipcRenderer) return;\n\n          ipcRenderer.removeAllListeners('serve-folder-done');\n          ipcRenderer.removeAllListeners('local-network-ips');\n          ipcRenderer.on('serve-folder-done', (event, err, serverParams) => {\n            if (err) {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: null,\n                networkPreviewHost: null,\n                networkPreviewError: err,\n              });\n            } else {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: serverParams.port,\n              });\n            }\n\n            setTimeout(() => this._checkSubscriptionForNetworkPreview());\n          });\n          ipcRenderer.on('local-network-ip', (event, ipAddress) => {\n            this.setState({\n              networkPreviewHost: ipAddress,\n            });\n          });\n          ipcRenderer.send('serve-folder', {\n            root: gamePath,\n          });\n          ipcRenderer.send('get-local-network-ip');\n        }\n      }\n    );\n  };\n\n  _prepareExporter = (): Promise<{|\n    outputDir: string,\n    exporter: gdjsExporter,\n    gdjsRoot: string,\n  |}> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const outputDir = path.join(fileSystem.getTempDir(), 'preview');\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        outputDir,\n        exporter,\n        gdjsRoot,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n\n    // Start the debugger server for previews. Even if not used,\n    // useful if the user opens the Debugger editor later, or want to\n    // hot reload.\n    return this.getPreviewDebuggerServer()\n      .startServer()\n      .catch(err => {\n        // Ignore any error when running the debugger server - the preview\n        // can still work without it.\n        console.error(\n          'Unable to start the Debugger Server for the preview:',\n          err\n        );\n      })\n      .then(() => this._prepareExporter())\n      .then(({ outputDir, exporter, gdjsRoot }) => {\n        timeFunction(\n          () => {\n            const previewExportOptions = new gd.PreviewExportOptions(\n              project,\n              outputDir\n            );\n            previewExportOptions.setLayoutName(layout.getName());\n            if (externalLayout) {\n              previewExportOptions.setExternalLayoutName(\n                externalLayout.getName()\n              );\n            }\n\n            const previewDebuggerServerAddress = getDebuggerServerAddress();\n            if (previewDebuggerServerAddress) {\n              previewExportOptions.useWebsocketDebuggerClientWithServerAddress(\n                previewDebuggerServerAddress.address,\n                '' + previewDebuggerServerAddress.port\n              );\n            }\n\n            const includeFileHashs = this.props.getIncludeFileHashs();\n            for (const includeFile in includeFileHashs) {\n              const hash = includeFileHashs[includeFile];\n              previewExportOptions.setIncludeFileHash(includeFile, hash);\n            }\n\n            // Give the preview the path to the \"@electron/remote\" module of the editor,\n            // as this is required by some features and we've not removed dependency\n            // on \"@electron/remote\" yet.\n            previewExportOptions.setElectronRemoteRequirePath(\n              path.join(\n                gdjsRoot,\n                '../preview_node_modules',\n                '@electron/remote',\n                'renderer/index.js'\n              )\n            );\n\n            const debuggerIds = this.getPreviewDebuggerServer().getExistingDebuggerIds();\n            const shouldHotReload =\n              previewOptions.hotReload && !!debuggerIds.length;\n\n            previewExportOptions.setProjectDataOnlyExport(\n              // Only export project data if asked and if a hot-reloading is being done.\n              shouldHotReload && previewOptions.projectDataOnlyExport\n            );\n\n            previewExportOptions.setFullLoadingScreen(\n              previewOptions.fullLoadingScreen\n            );\n\n            exporter.exportProjectForPixiPreview(previewExportOptions);\n            previewExportOptions.delete();\n            exporter.delete();\n\n            if (shouldHotReload) {\n              debuggerIds.forEach(debuggerId => {\n                this.getPreviewDebuggerServer().sendMessage(debuggerId, {\n                  command: 'hotReload',\n                });\n              });\n\n              if (\n                this.state.hotReloadsCount % 16 === 0 &&\n                this._hotReloadSubscriptionChecker\n              ) {\n                this._hotReloadSubscriptionChecker.checkHasSubscription();\n              }\n              this.setState(state => ({\n                hotReloadsCount: state.hotReloadsCount + 1,\n              }));\n            } else {\n              this._openPreviewWindow(project, outputDir, previewOptions);\n            }\n          },\n          time => console.info(`Preview took ${time}ms`)\n        );\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    return localPreviewDebuggerServer;\n  }\n\n  _checkSubscriptionForNetworkPreview = () => {\n    if (!this._networkPreviewSubscriptionChecker) return true;\n\n    return this._networkPreviewSubscriptionChecker.checkHasSubscription();\n  };\n\n  render() {\n    const {\n      networkPreviewDialogOpen,\n      networkPreviewHost,\n      networkPreviewPort,\n      networkPreviewError,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._networkPreviewSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() => {\n            this.setState({ networkPreviewDialogOpen: false });\n            if (this.props.onChangeSubscription)\n              this.props.onChangeSubscription();\n          }}\n          id=\"Preview over wifi\"\n          title={<Trans>Preview over wifi</Trans>}\n          mode=\"try\"\n        />\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._hotReloadSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() => {\n            if (this.props.onChangeSubscription)\n              this.props.onChangeSubscription();\n          }}\n          id=\"Hot reloading\"\n          title={\n            <Trans>Live preview (apply changes to the running preview)</Trans>\n          }\n          mode=\"try\"\n        />\n        <LocalNetworkPreviewDialog\n          open={networkPreviewDialogOpen}\n          url={\n            networkPreviewHost && networkPreviewPort\n              ? `${networkPreviewHost}:${networkPreviewPort}`\n              : null\n          }\n          error={networkPreviewError}\n          onClose={() => this.setState({ networkPreviewDialogOpen: false })}\n          onExport={this.props.onExport}\n          onRunPreviewLocally={this._openPreviewBrowserWindow}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport TextField from '../../../UI/TextField';\nimport Text from '../../../UI/Text';\nimport { Line } from '../../../UI/Grid';\nimport PlaceholderLoader from '../../../UI/PlaceholderLoader';\n\ntype Props = {|\n  open: boolean,\n  url: ?string,\n  onClose: () => void,\n  onExport: ?() => void,\n  onRunPreviewLocally: () => void,\n  error: ?any,\n|};\n\nexport default class LocalNetworkDialog extends React.Component<Props, {}> {\n  render() {\n    const {\n      url,\n      open,\n      error,\n      onExport,\n      onClose,\n      onRunPreviewLocally,\n    } = this.props;\n    if (!open) return null;\n\n    return (\n      <Dialog\n        actions={[\n          <FlatButton\n            key=\"close\"\n            label={<Trans>Close</Trans>}\n            primary\n            onClick={onClose}\n          />,\n        ]}\n        secondaryActions={[\n          onExport && (\n            <FlatButton\n              key=\"export\"\n              label={<Trans>Export game</Trans>}\n              onClick={onExport}\n            />\n          ),\n          <FlatButton\n            key=\"run-preview-locally\"\n            label={<Trans>Run on this computer</Trans>}\n            onClick={onRunPreviewLocally}\n          />,\n        ]}\n        cannotBeDismissed={true}\n        open={open}\n        onRequestClose={onClose}\n      >\n        {error && (\n          <Line>\n            <Text>\n              <Trans>\n                Unable to start the server for the preview! Make sure that you\n                are authorized to run servers on this computer. Otherwise, use\n                classic preview to test your game.\n              </Trans>\n            </Text>\n          </Line>\n        )}\n        {!error && !url && <PlaceholderLoader />}\n        {!error && url && (\n          <div>\n            <Line>\n              <Text>\n                <Trans>\n                  Your preview is ready! On your mobile or tablet, open your\n                  browser and enter in the address bar:\n                </Trans>\n              </Text>\n            </Line>\n            <TextField value={url} fullWidth />\n            <Line>\n              <Text>\n                <Trans>\n                  Please note that your device should be connected on the same\n                  network as this computer.\n                </Trans>\n              </Text>\n            </Line>\n          </div>\n        )}\n      </Dialog>\n    );\n  }\n}\n","// @flow\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport {\n  type PreviewDebuggerServerCallbacks,\n  type PreviewDebuggerServer,\n  type DebuggerId,\n  type ServerAddress,\n} from '../../PreviewLauncher.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\nlet debuggerServerState: 'started' | 'stopped' = 'stopped';\nlet debuggerServerAddress: ?ServerAddress = null;\nconst callbacksList: Array<PreviewDebuggerServerCallbacks> = [];\nconst debuggerIds: Array<DebuggerId> = [];\n\nconst removeServerListeners = () => {\n  if (!ipcRenderer) return;\n\n  ipcRenderer.removeAllListeners('debugger-send-message-done');\n  ipcRenderer.removeAllListeners('debugger-error-received');\n  ipcRenderer.removeAllListeners('debugger-connection-closed');\n  ipcRenderer.removeAllListeners('debugger-connection-opened');\n  ipcRenderer.removeAllListeners('debugger-start-server-done');\n  ipcRenderer.removeAllListeners('debugger-message-received');\n};\n\n/**\n * A debugger server implemented using Electron (this one is just a bridge to it,\n * communicating through events with it).\n */\nexport const localPreviewDebuggerServer: PreviewDebuggerServer = {\n  startServer: () => {\n    if (!ipcRenderer) return Promise.reject();\n    if (debuggerServerState === 'started') return Promise.resolve();\n\n    const serverStartPromise = new Promise((resolve, reject) => {\n      let serverStartPromiseCompleted = false;\n      debuggerServerState = 'stopped';\n      debuggerServerAddress = null;\n      removeServerListeners();\n\n      ipcRenderer.on('debugger-error-received', (event, err) => {\n        if (!serverStartPromiseCompleted) {\n          reject(err);\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onErrorReceived }) => onErrorReceived(err));\n      });\n\n      ipcRenderer.on('debugger-connection-closed', (event, { id }) => {\n        const debuggerIdIndex = debuggerIds.indexOf(id);\n        if (debuggerIdIndex !== -1) debuggerIds.splice(debuggerIdIndex, 1);\n\n        callbacksList.forEach(({ onConnectionClosed }) =>\n          onConnectionClosed({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-connection-opened', (event, { id }) => {\n        debuggerIds.push(id);\n        callbacksList.forEach(({ onConnectionOpened }) =>\n          onConnectionOpened({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-start-server-done', (event, { address }) => {\n        console.info('Local preview debugger started');\n        debuggerServerState = 'started';\n        debuggerServerAddress = address;\n        if (!serverStartPromiseCompleted) {\n          resolve();\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onServerStateChanged }) =>\n          onServerStateChanged()\n        );\n      });\n\n      ipcRenderer.on('debugger-message-received', (event, { id, message }) => {\n        console.info('Processing message received for debugger');\n        try {\n          const parsedMessage = JSON.parse(message);\n          callbacksList.forEach(({ onHandleParsedMessage }) =>\n            onHandleParsedMessage({ id, parsedMessage })\n          );\n        } catch (e) {\n          console.warn(\n            'Error while parsing message received from debugger client:',\n            e\n          );\n        }\n      });\n      ipcRenderer.send('debugger-start-server');\n    });\n\n    // Consider the start of the server as a failure if not completed/errored\n    // after 5s.\n    const serverStartTimeoutPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject(\n          new Error(\n            'Debugger server not started or errored after 5s - aborting.'\n          )\n        );\n      }, 5000);\n    });\n    return Promise.race([serverStartPromise, serverStartTimeoutPromise]);\n  },\n  sendMessage: (id: DebuggerId, message: Object) => {\n    if (!ipcRenderer) return;\n    if (debuggerServerState === 'stopped') {\n      console.error('Cannot send message when debugger server is stopped.');\n      return;\n    }\n\n    ipcRenderer.send('debugger-send-message', {\n      id,\n      message: JSON.stringify(message),\n    });\n  },\n  getServerState: () => debuggerServerState,\n  getExistingDebuggerIds: () => debuggerIds,\n  registerCallbacks: (callbacks: PreviewDebuggerServerCallbacks) => {\n    callbacksList.push(callbacks);\n\n    return () => {\n      const callbacksIndex = callbacksList.indexOf(callbacks);\n      if (callbacksIndex !== -1) callbacksList.splice(callbacksIndex, 1);\n    };\n  },\n};\n\nexport const getDebuggerServerAddress = (): ?ServerAddress =>\n  debuggerServerAddress;\n","// @flow\nimport { type Exporter } from '../ExportDialog';\nimport { localCordovaExportPipeline } from './LocalCordovaExport';\nimport { localElectronExportPipeline } from './LocalElectronExport';\nimport { localHTML5ExportPipeline } from './LocalHTML5Export';\nimport { localFacebookInstantGamesExportPipeline } from './LocalFacebookInstantGamesExport';\nimport { localOnlineCordovaExportPipeline } from './LocalOnlineCordovaExport';\nimport { localOnlineElectronExportPipeline } from './LocalOnlineElectronExport';\nimport { localOnlineWebExportPipeline } from './LocalOnlineWebExport';\nimport { cordovaExporter } from '../GenericExporters/CordovaExport';\nimport { onlineWebExporter } from '../GenericExporters/OnlineWebExport';\nimport { html5Exporter } from '../GenericExporters/HTML5Export';\nimport { facebookInstantGamesExporter } from '../GenericExporters/FacebookInstantGamesExport';\nimport { onlineCordovaExporter } from '../GenericExporters/OnlineCordovaExport';\nimport { onlineElectronExporter } from '../GenericExporters/OnlineElectronExport';\nimport { electronExporter } from '../GenericExporters/ElectronExport';\n\nexport const localOnlineWebExporter: Exporter = {\n  ...onlineWebExporter,\n  exportPipeline: localOnlineWebExportPipeline,\n};\n\nexport const localAutomatedExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: localHTML5ExportPipeline,\n  },\n  {\n    ...onlineCordovaExporter,\n    exportPipeline: localOnlineCordovaExportPipeline,\n  },\n  {\n    ...onlineElectronExporter,\n    exportPipeline: localOnlineElectronExportPipeline,\n  },\n  {\n    ...facebookInstantGamesExporter,\n    exportPipeline: localFacebookInstantGamesExportPipeline,\n  },\n];\n\nexport const localManualExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: localHTML5ExportPipeline,\n  },\n  {\n    ...cordovaExporter,\n    exportPipeline: localCordovaExportPipeline,\n  },\n  {\n    ...electronExporter,\n    exportPipeline: localElectronExportPipeline,\n  },\n];\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/CordovaExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-cordova',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/ElectronExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-electron',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { ExplanationHeader, DoneFooter } from '../GenericExporters/HTML5Export';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-html5',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Export as a HTML5 game</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            fullWidth\n            primary\n            onClick={() => openExportFolder()}\n            label={<Trans>Open the exported game folder</Trans>}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport LocalFilePicker from '../../UI/LocalFilePicker';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/FacebookInstantGamesExport';\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst app = remote ? remote.app : null;\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  archiveOutputFilename: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-facebook-instant-games',\n\n  getInitialExportState: (project: gdProject) => ({\n    archiveOutputFilename: app\n      ? path.join(app.getPath('documents'), 'fb-instant-game.zip')\n      : '',\n  }),\n\n  canLaunchBuild: exportState => !!exportState.archiveOutputFilename,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFilePicker\n          title={'Facebook Instant Games export zip file'}\n          message={\n            'Choose where to save the exported file for Facebook Instant Games'\n          }\n          filters={[\n            {\n              name: 'Compressed file for Facebook Instant Games',\n              extensions: ['zip'],\n            },\n          ]}\n          value={exportState.archiveOutputFilename}\n          defaultPath={app ? app.getPath('documents') : ''}\n          onChange={value =>\n            updateExportState(() => ({ archiveOutputFilename: value }))\n          }\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'FacebookInstantGamesExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForFacebookInstantGames', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: context.exportState.archiveOutputFilename,\n    });\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell && path)\n        shell.openPath(path.dirname(exportState.archiveOutputFilename));\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\n\nimport React, { PureComponent } from 'react';\nimport TextField from '../TextField';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport RaisedButton from '../RaisedButton';\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  value: string,\n  onChange: string => void,\n  title: string,\n  message: string,\n  defaultPath?: string,\n  fullWidth?: boolean,\n  filters: Array<{\n    name: string,\n    extensions: Array<string>,\n  }>,\n|};\n\nexport default class LocalFilePicker extends PureComponent<Props, *> {\n  onChooseFolder = () => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = remote.getCurrentWindow();\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: this.props.title,\n        filters: this.props.filters,\n        message: this.props.message,\n        defaultPath: this.props.defaultPath,\n      })\n      .then(({ filePath }) => {\n        this.props.onChange(filePath || '');\n      });\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          ...styles.container,\n          width: this.props.fullWidth ? '100%' : undefined,\n        }}\n      >\n        <TextField\n          margin=\"dense\"\n          style={styles.textField}\n          type=\"text\"\n          hintText={t`Choose a file`}\n          value={this.props.value}\n          onChange={(event, value) => this.props.onChange(value)}\n        />\n        <RaisedButton\n          label={<Trans>Choose</Trans>}\n          style={styles.button}\n          onClick={this.onChooseFolder}\n        />\n      </div>\n    );\n  }\n}\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineCordovaExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-cordova',\n  onlineBuildType: 'cordova-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => ({\n    targets: ['androidApk'],\n    keystore: 'new',\n    signingDialogOpen: false,\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '',\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Packaging for Android</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineCordovaExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      exportState.keystore,\n      gameId\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineElectronExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-electron',\n  onlineBuildType: 'electron-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    !!exportState.targets.length && (errored || exportStep === ''),\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineElectronExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      gameId\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  OnlineGameLink,\n} from '../GenericExporters/OnlineWebExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-web',\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  // Build can be launched if just opened the dialog or build errored, re-enabled when done.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '' || exportStep === 'done',\n\n  // Navigation is enabled when the build is errored or if the build is not done.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored && !['', 'done'].includes(exportStep),\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Generate link</Trans>,\n\n  renderCustomStepsProgress: ({\n    build,\n    project,\n    onSaveProject,\n    errored,\n    exportStep,\n  }) => (\n    <OnlineGameLink\n      build={build}\n      project={project}\n      onSaveProject={onSaveProject}\n      errored={errored}\n      exportStep={exportStep}\n    />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineWebExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n      sizeLimit: 250 * 1000 * 1000,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      gameId\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { useCommandWithOptions } from '../CommandPalette/CommandHooks';\nimport { getElectronAccelerator } from '../KeyboardShortcuts';\nimport { useShortcutMap } from '../KeyboardShortcuts';\nimport { t } from '@lingui/macro';\nimport { isMacLike } from '../Utils/Platform';\nimport { type MainMenuProps } from './MainMenu.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype MainMenuEvent =\n  | 'main-menu-open'\n  | 'main-menu-open-recent'\n  | 'main-menu-save'\n  | 'main-menu-save-as'\n  | 'main-menu-close'\n  | 'main-menu-close-app'\n  | 'main-menu-export'\n  | 'main-menu-create'\n  | 'main-menu-open-project-manager'\n  | 'main-menu-open-home-page'\n  | 'main-menu-open-debugger'\n  | 'main-menu-open-about'\n  | 'main-menu-open-preferences'\n  | 'main-menu-open-language'\n  | 'main-menu-open-profile'\n  | 'main-menu-open-games-dashboard'\n  | 'update-status';\n\ntype MenuItemTemplate =\n  | {|\n      onClickSendEvent?: MainMenuEvent,\n      onClickOpenLink?: string,\n      accelerator?: string,\n      enabled?: boolean,\n      label?: string,\n      role?: string,\n      eventArgs?: any,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n      label: string,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n      role: string,\n    |}\n  | {|\n      type: 'separator',\n    |}\n  | {|\n      role: string,\n    |};\n\ntype RootMenuTemplate =\n  | {|\n      label?: string,\n      role?: string,\n      submenu: Array<MenuItemTemplate>,\n    |}\n  | {|\n      role: string,\n      submenu: Array<MenuItemTemplate>,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n    |};\n\n// Custom hook to register and deregister IPC listener\nconst useIPCEventListener = (ipcEvent: MainMenuEvent, func) => {\n  React.useEffect(\n    () => {\n      if (!ipcRenderer) return;\n      const handler = (event, ...eventArgs) => func(...eventArgs);\n      ipcRenderer.on(ipcEvent, handler);\n      return () => ipcRenderer.removeListener(ipcEvent, handler);\n    },\n    [ipcEvent, func]\n  );\n};\n\nconst buildAndSendMenuTemplate = (\n  project,\n  i18n,\n  recentProjectFiles,\n  shortcutMap\n) => {\n  const fileTemplate = {\n    label: i18n._(t`File`),\n    submenu: [\n      {\n        label: i18n._(t`Create a New Project...`),\n        accelerator: getElectronAccelerator(shortcutMap['CREATE_NEW_PROJECT']),\n        onClickSendEvent: 'main-menu-create',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Open...`),\n        accelerator: getElectronAccelerator(shortcutMap['OPEN_PROJECT']),\n        onClickSendEvent: 'main-menu-open',\n      },\n      {\n        label: i18n._(t`Open Recent`),\n        submenu: recentProjectFiles.map(item => ({\n          label: item.fileMetadata.fileIdentifier,\n          onClickSendEvent: 'main-menu-open-recent',\n          eventArgs: item,\n        })),\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Save`),\n        accelerator: getElectronAccelerator(shortcutMap['SAVE_PROJECT']),\n        onClickSendEvent: 'main-menu-save',\n        enabled: !!project,\n      },\n      {\n        label: i18n._(t`Save as...`),\n        accelerator: getElectronAccelerator(shortcutMap['SAVE_PROJECT_AS']),\n        onClickSendEvent: 'main-menu-save-as',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Export (web, iOS, Android)...`),\n        accelerator: getElectronAccelerator(shortcutMap['EXPORT_GAME']),\n        onClickSendEvent: 'main-menu-export',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Close Project`),\n        accelerator: getElectronAccelerator(shortcutMap['CLOSE_PROJECT']),\n        onClickSendEvent: 'main-menu-close',\n        enabled: !!project,\n      },\n    ],\n  };\n  if (!isMacLike()) {\n    fileTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`My Profile`),\n        onClickSendEvent: 'main-menu-open-profile',\n      },\n      {\n        label: i18n._(t`Games Dashboard`),\n        onClickSendEvent: 'main-menu-open-games-dashboard',\n      },\n      {\n        label: i18n._(t`Preferences`),\n        onClickSendEvent: 'main-menu-open-preferences',\n      },\n      {\n        label: i18n._(t`Language`),\n        onClickSendEvent: 'main-menu-open-language',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Exit GDevelop`),\n        accelerator: getElectronAccelerator(shortcutMap['QUIT_APP']),\n        onClickSendEvent: 'main-menu-close-app',\n      }\n    );\n  }\n\n  const editTemplate = {\n    label: i18n._(t`Edit`),\n    submenu: [\n      { label: i18n._(t`Undo`), role: 'undo' },\n      { label: i18n._(t`Redo`), role: 'redo' },\n      { type: 'separator' },\n      { label: i18n._(t`Cut`), role: 'cut' },\n      { label: i18n._(t`Copy`), role: 'copy' },\n      { label: i18n._(t`Paste`), role: 'paste' },\n      { label: i18n._(t`Paste and Match Style`), role: 'pasteandmatchstyle' },\n      { label: i18n._(t`Delete`), role: 'delete' },\n      { label: i18n._(t`Select All`), role: 'selectall' },\n    ],\n  };\n\n  const viewTemplate = {\n    label: i18n._(t`View`),\n    submenu: [\n      {\n        label: i18n._(t`Show Project Manager`),\n        accelerator: getElectronAccelerator(\n          shortcutMap['OPEN_PROJECT_MANAGER']\n        ),\n        onClickSendEvent: 'main-menu-open-project-manager',\n        enabled: !!project,\n      },\n      {\n        label: i18n._(t`Show Home`),\n        onClickSendEvent: 'main-menu-open-home-page',\n      },\n      {\n        label: i18n._(t`Open Debugger`),\n        onClickSendEvent: 'main-menu-open-debugger',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      { label: i18n._(t`Toggle Developer Tools`), role: 'toggledevtools' },\n      { type: 'separator' },\n      { label: i18n._(t`Toggle Fullscreen`), role: 'togglefullscreen' },\n    ],\n  };\n\n  const windowTemplate = {\n    label: i18n._(t`Window`),\n    role: 'window',\n    submenu: [{ label: i18n._(t`Minimize`), role: 'minimize' }],\n  };\n\n  const helpTemplate = {\n    label: i18n._(t`Help`),\n    role: 'help',\n    submenu: [\n      {\n        label: i18n._(t`GDevelop website`),\n        onClickOpenLink: 'http://gdevelop.io',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Community Forums`),\n        onClickOpenLink: 'https://forum.gdevelop.io',\n      },\n      {\n        label: i18n._(t`Community Discord Chat`),\n        onClickOpenLink: 'https://discord.gg/gdevelop',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Contribute to GDevelop`),\n        onClickOpenLink: 'https://gdevelop.io/page/contribute',\n      },\n      {\n        label: i18n._(t`Create Extensions for GDevelop`),\n        onClickOpenLink:\n          'https://github.com/4ian/GDevelop/blob/master/newIDE/README-extensions.md',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Help to Translate GDevelop`),\n        onClickOpenLink: 'https://crowdin.com/project/gdevelop',\n      },\n      {\n        label: i18n._(t`Report a wrong translation`),\n        onClickOpenLink: 'https://github.com/4ian/GDevelop/issues/969',\n      },\n    ],\n  };\n  if (!isMacLike()) {\n    helpTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`About GDevelop`),\n        onClickSendEvent: 'main-menu-open-about',\n      }\n    );\n  }\n\n  const template: Array<RootMenuTemplate> = [\n    fileTemplate,\n    editTemplate,\n    viewTemplate,\n    windowTemplate,\n    helpTemplate,\n  ];\n\n  if (isMacLike()) {\n    template.unshift({\n      label: i18n._(t`GDevelop 5`),\n      submenu: [\n        {\n          label: i18n._(t`About GDevelop`),\n          onClickSendEvent: 'main-menu-open-about',\n        },\n        { type: 'separator' },\n        {\n          label: i18n._(t`My Profile`),\n          onClickSendEvent: 'main-menu-open-profile',\n        },\n        {\n          label: i18n._(t`Games Dashboard`),\n          onClickSendEvent: 'main-menu-open-games-dashboard',\n        },\n        {\n          label: i18n._(t`Preferences`),\n          onClickSendEvent: 'main-menu-open-preferences',\n        },\n        {\n          label: i18n._(t`Language`),\n          onClickSendEvent: 'main-menu-open-language',\n        },\n        { type: 'separator' },\n        { role: 'services', submenu: [] },\n        { type: 'separator' },\n        { role: 'hide' },\n        { role: 'hideothers' },\n        { role: 'unhide' },\n        { type: 'separator' },\n        { role: 'quit' },\n      ],\n    });\n\n    editTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`Speech`),\n        submenu: [{ role: 'startspeaking' }, { role: 'stopspeaking' }],\n      }\n    );\n\n    windowTemplate.submenu = [\n      { role: 'minimize' },\n      { role: 'zoom' },\n      { type: 'separator' },\n      { role: 'front' },\n    ];\n  }\n\n  if (ipcRenderer) {\n    ipcRenderer.send('set-main-menu', template);\n  }\n};\n\n/**\n * Create and update the editor main menu using Electron APIs.\n */\nconst ElectronMainMenu = (props: MainMenuProps) => {\n  const { i18n, project, recentProjectFiles, onOpenRecentFile } = props;\n  const shortcutMap = useShortcutMap();\n  const language = i18n.language;\n\n  useIPCEventListener('main-menu-open', props.onChooseProject);\n  useIPCEventListener('main-menu-open-recent', props.onOpenRecentFile);\n  useIPCEventListener('main-menu-save', props.onSaveProject);\n  useIPCEventListener('main-menu-save-as', props.onSaveProjectAs);\n  useIPCEventListener('main-menu-close', props.onCloseProject);\n  useIPCEventListener('main-menu-close-app', props.onCloseApp);\n  useIPCEventListener('main-menu-export', props.onExportProject);\n  useIPCEventListener('main-menu-create', props.onCreateProject);\n  useIPCEventListener(\n    'main-menu-open-project-manager',\n    props.onOpenProjectManager\n  );\n  useIPCEventListener('main-menu-open-home-page', props.onOpenHomePage);\n  useIPCEventListener('main-menu-open-debugger', props.onOpenDebugger);\n  useIPCEventListener('main-menu-open-about', props.onOpenAbout);\n  useIPCEventListener('main-menu-open-preferences', props.onOpenPreferences);\n  useIPCEventListener('main-menu-open-language', props.onOpenLanguage);\n  useIPCEventListener('main-menu-open-profile', props.onOpenProfile);\n  useIPCEventListener(\n    'main-menu-open-games-dashboard',\n    props.onOpenGamesDashboard\n  );\n  useIPCEventListener('update-status', props.setUpdateStatus);\n\n  React.useEffect(\n    () => {\n      buildAndSendMenuTemplate(project, i18n, recentProjectFiles, shortcutMap);\n    },\n    [i18n, language, project, recentProjectFiles, shortcutMap]\n  );\n\n  useCommandWithOptions('OPEN_RECENT_PROJECT', true, {\n    generateOptions: React.useCallback(\n      () =>\n        recentProjectFiles.map(item => ({\n          text: item.fileMetadata.fileIdentifier,\n          handler: () => onOpenRecentFile(item),\n        })),\n      [onOpenRecentFile, recentProjectFiles]\n    ),\n  });\n\n  return null;\n};\n\nexport default ElectronMainMenu;\n","// @flow\n// Note: this file does not use export/imports and use Flow comments to allow its usage from Node.js\n\nconst { loadExtension } = require('.');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst { findJsExtensionModules } = require('./LocalJsExtensionsFinder');\n\n/*flow-include\nimport type {JsExtensionsLoader, TranslationFunction} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\n\ntype MakeExtensionsLoaderArguments = {|\n  gd: any,\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n  onFindGDJS?: ?() => Promise<{gdjsRoot: string}>\n|};\n*/\n\n/**\n * Loader that will find all JS extensions declared in GDJS/Runtime/Extensions/xxx/JsExtension.js.\n * If you add a new extension and also want it to be available for the web-app version, add it in\n * BrowserJsExtensionsLoader.js\n */\nmodule.exports = function makeExtensionsLoader(\n  {\n    gd,\n    objectsEditorService,\n    objectsRenderingService,\n    filterExamples,\n    onFindGDJS,\n  } /*: MakeExtensionsLoaderArguments*/\n) /*: JsExtensionsLoader*/ {\n  return {\n    loadAllExtensions: (_ /*: TranslationFunction */) => {\n      return findJsExtensionModules({ filterExamples, onFindGDJS }).then(\n        extensionModulePaths => {\n          return Promise.all(\n            extensionModulePaths.map(extensionModulePath => {\n              let extensionModule = null;\n              try {\n                extensionModule = optionalRequire(extensionModulePath, {\n                  rethrowException: true,\n                });\n              } catch (ex) {\n                return {\n                  extensionModulePath,\n                  result: {\n                    message:\n                      'Unable to import extension. Please check for any syntax error or error that would prevent it from being run.',\n                    error: true,\n                    rawError: ex,\n                  },\n                };\n              }\n\n              if (extensionModule) {\n                // Load any editor for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsEditorService &&\n                  extensionModule.registerEditorConfigurations\n                ) {\n                  extensionModule.registerEditorConfigurations(\n                    objectsEditorService\n                  );\n                }\n\n                // Load any renderer for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsRenderingService &&\n                  extensionModule.registerInstanceRenderers\n                ) {\n                  extensionModule.registerInstanceRenderers(\n                    objectsRenderingService\n                  );\n                }\n\n                return {\n                  extensionModulePath,\n                  result: loadExtension(\n                    _,\n                    gd,\n                    gd.JsPlatform.get(),\n                    extensionModule\n                  ),\n                };\n              }\n\n              return {\n                extensionModulePath,\n                result: {\n                  error: true,\n                  message:\n                    'Unknown error. Please check for any syntax error or error that would prevent it from being run.',\n                },\n              };\n            })\n          );\n        },\n        err => {\n          console.error(`Unable to find JS extensions modules`);\n          throw err;\n        }\n      );\n    },\n  };\n};\n","// Note: this file does not use export/imports nor Flow to allow its usage from Node.js\n\nconst { findGDJS } = require('../GameEngineFinder/LocalGDJSFinder');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\n\nconst checkIfPathHasJsExtensionModule = extensionFolderPath => {\n  return new Promise(resolve => {\n    const jsExtensionModulePath = path.join(\n      extensionFolderPath,\n      'JsExtension.js'\n    );\n    fs.stat(jsExtensionModulePath, (err, stats) => {\n      if (err) {\n        return resolve(null);\n      }\n\n      return resolve(stats.isFile() ? jsExtensionModulePath : null);\n    });\n  });\n};\n\nconst findJsExtensionModules = ({ filterExamples, onFindGDJS }) => {\n  return (onFindGDJS ? onFindGDJS() : findGDJS()).then(({ gdjsRoot }) => {\n    const extensionsRoot = path.join(gdjsRoot, 'Runtime', 'Extensions');\n    console.info(\n      `Searching for JS extensions (file called JsExtension.js) in ${extensionsRoot}...`\n    );\n    return new Promise((resolve, reject) => {\n      fs.readdir(extensionsRoot, (error, extensionFolders) => {\n        if (error) {\n          return reject(error);\n        }\n\n        const filteredExtensionFolders = extensionFolders.filter(folder => {\n          if (!filterExamples) return true;\n\n          return folder.indexOf('Example') === -1;\n        });\n\n        Promise.all(\n          filteredExtensionFolders.map(extensionFolder =>\n            checkIfPathHasJsExtensionModule(\n              path.join(extensionsRoot, extensionFolder)\n            )\n          )\n        ).then(modulePaths => {\n          resolve(modulePaths.filter(modulePath => !!modulePath));\n        }, reject);\n      });\n    });\n  });\n};\n\nmodule.exports = {\n  findJsExtensionModules,\n};\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { getUID } from '../../Utils/LocalUserInfo';\nimport slugs from 'slugs';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst fs = optionalRequire('fs');\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to local files.\n */\nexport const makeLocalEventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  // The generated code for extensions will be stored in a temporary directory\n\n  const outputDir = path.join(\n    os.tmpdir(),\n    `GDGeneratedEventsFunctions-` + getUID()\n  );\n  fs.mkdir(outputDir, err => {\n    if (err && err.code !== 'EEXIST') {\n      console.error(\n        'Unable to create the directory where to output events functions generated code: ',\n        err\n      );\n      return;\n    }\n  });\n\n  const getPathFor = (codeNamespace: string) => {\n    return `${outputDir}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) => getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(functionCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(behaviorCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n  };\n};\n","// @flow\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst writeJSONFile = (object: Object, filepath: string): Promise<void> => {\n  if (!fs) return Promise.reject(new Error('Filesystem is not supported.'));\n\n  try {\n    const content = JSON.stringify(object, null, 2);\n    return fs.ensureDir(path.dirname(filepath)).then(\n      () =>\n        new Promise((resolve, reject) => {\n          fs.writeFile(filepath, content, (err: ?Error) => {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve();\n          });\n        })\n    );\n  } catch (stringifyException) {\n    return Promise.reject(stringifyException);\n  }\n};\n\nexport default class LocalEventsFunctionsExtensionWriter {\n  static chooseEventsFunctionExtensionFile = (\n    extensionName?: string\n  ): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an extension of the project',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n        defaultPath: extensionName ? extensionName : 'Extension.json',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeEventsFunctionsExtension = (\n    extension: gdEventsFunctionsExtension,\n    filepath: string\n  ): Promise<void> => {\n    const serializedObject = serializeToJSObject(extension);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the events function extension:', err);\n      throw err;\n    });\n  };\n}\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst fs = optionalRequire('fs');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport default class LocalEventsFunctionsExtensionOpener {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showOpenDialog(browserWindow, {\n        title: 'Import an extension in the project',\n        properties: ['openFile'],\n        message: 'Choose an extension file to import (.json file)',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return null;\n        return filePaths[0];\n      });\n  };\n\n  static readEventsFunctionExtensionFile = (\n    filepath: string\n  ): Promise<Object> => {\n    return readJSONFile(filepath);\n  };\n}\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport PreferencesContext from '../MainFrame/Preferences/PreferencesContext';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n/**\n * Set up some watchers for GDJS and Extensions sources.\n * Stop the watchers when the component is unmounted or `shouldWatch` prop is false.\n */\nexport const LocalGDJSDevelopmentWatcher = () => {\n  const preferences = React.useContext(PreferencesContext);\n  const shouldWatch = preferences.values.useGDJSDevelopmentWatcher;\n\n  React.useEffect(\n    () => {\n      if (!shouldWatch) {\n        // Nothing to set up in the effect if watch is deactivated.\n        return;\n      }\n\n      if (!ipcRenderer) {\n        console.error(\n          'Unable to find ipcRenderer to set up GDJS development watchers'\n        );\n        return;\n      }\n\n      ipcRenderer.send('setup-local-gdjs-development-watcher');\n      return () => {\n        ipcRenderer.send('close-local-gdjs-development-watcher');\n      };\n    },\n    [shouldWatch]\n  );\n\n  return null;\n};\n","// @flow\nimport axios from 'axios';\nimport { t } from '@lingui/macro';\n\nimport LocalFileStorageProvider from '../../ProjectsStorage/LocalFileStorageProvider';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { getExample } from '../../Utils/GDevelopServices/Example';\nimport { sendNewGameCreated } from '../../Utils/Analytics/EventSender';\nimport { showErrorBox } from '../../UI/Messages/MessageBox';\nimport { writeAndCheckFile } from '../../ProjectsStorage/LocalFileStorageProvider/LocalProjectWriter';\nimport {\n  type OnCreateBlankFunction,\n  type OnCreateFromExampleShortHeaderFunction,\n} from '../CreateProjectDialog';\nconst gd: libGDevelop = global.gd;\n\nconst path = optionalRequire('path');\nvar fs = optionalRequire('fs-extra');\n\nexport const onCreateBlank: OnCreateBlankFunction = async ({\n  i18n,\n  settings,\n}) => {\n  const { projectName, outputPath } = settings;\n  if (!fs || !outputPath) return;\n\n  try {\n    fs.mkdirsSync(outputPath);\n  } catch (error) {\n    showErrorBox({\n      message: i18n._(\n        t`Unable to create the game in the specified folder. Check that you have permissions to write in this folder: ${outputPath} or choose another folder.`\n      ),\n      rawError: error,\n      errorId: 'local-example-creation-error',\n    });\n    return;\n  }\n\n  const project: gdProject = gd.ProjectHelper.createNewGDJSProject();\n  const filePath = path.join(outputPath, 'game.json');\n  project.setProjectFile(filePath);\n  sendNewGameCreated({ exampleUrl: '', exampleSlug: '' });\n  return {\n    project,\n    storageProvider: LocalFileStorageProvider,\n    fileMetadata: { fileIdentifier: filePath },\n    projectName,\n  };\n};\n\nexport const onCreateFromExampleShortHeader: OnCreateFromExampleShortHeaderFunction = async ({\n  i18n,\n  exampleShortHeader,\n  settings,\n}) => {\n  const { projectName, outputPath } = settings;\n  if (!fs || !outputPath) return;\n  try {\n    const example = await getExample(exampleShortHeader);\n\n    // Prepare the folder for the example.\n    fs.mkdirsSync(outputPath);\n\n    // Download the project file and save it.\n    const response = await axios.get(example.projectFileUrl, {\n      responseType: 'text',\n      // Required to properly get the response as text, and not as JSON:\n      transformResponse: [data => data],\n    });\n    const projectFileContent = response.data;\n    const localFilePath = path.join(outputPath, 'game.json');\n\n    await writeAndCheckFile(projectFileContent, localFilePath);\n\n    sendNewGameCreated({\n      exampleUrl: example.projectFileUrl,\n      exampleSlug: exampleShortHeader.slug,\n    });\n    return {\n      storageProvider: LocalFileStorageProvider,\n      fileMetadata: { fileIdentifier: localFilePath },\n      projectName,\n    };\n  } catch (error) {\n    showErrorBox({\n      message:\n        i18n._(t`Unable to load the example or save it on disk.`) +\n        ' ' +\n        i18n._(t`Verify your internet connection or try again later.`),\n      rawError: error,\n      errorId: 'local-example-load-error',\n    });\n    return;\n  }\n};\n","//@flow\ntype Configuration = {| times: number |};\n\nexport const retryIfFailed = async <T>(\n  { times }: Configuration,\n  fn: () => Promise<T>\n): Promise<T> => {\n  let tries = 0;\n  let latestError = null;\n  while (tries < times) {\n    tries++;\n    latestError = null;\n    try {\n      const latestReturnValue = await fn();\n      return latestReturnValue;\n    } catch (error) {\n      latestError = error;\n    }\n  }\n\n  throw latestError;\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport newNameGenerator from '../../Utils/NewNameGenerator';\nimport { type ResourceFetcher, type FetchResourcesArgs } from '.';\nimport PromisePool from '@supercharge/promise-pool';\nimport { retryIfFailed } from '../../Utils/RetryIfFailed';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\n\nconst isFetchableUrl = (filename: string) => {\n  return (\n    filename.startsWith('http://') ||\n    filename.startsWith('https://') ||\n    filename.startsWith('ftp://')\n  );\n};\n\nconst getResourcesToFetch = (project: gdProject): Array<string> => {\n  const resourcesManager = project.getResourcesManager();\n\n  const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n  return allResourceNames.filter(resourceName => {\n    const resource = resourcesManager.getResource(resourceName);\n\n    return isFetchableUrl(resource.getFile());\n  });\n};\n\nconst fetchResources = async ({\n  project,\n  resourceNames,\n  onProgress,\n}: FetchResourcesArgs) => {\n  if (!fs || !ipcRenderer) throw new Error('Unsupported');\n  const resourcesManager = project.getResourcesManager();\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const baseAssetsPath = path.join(projectPath, 'assets');\n  const downloadedFilePaths = new Set<string>();\n  const erroredResources = [];\n  const fetchedResources = [];\n\n  let fetchedResourcesCount = 0;\n  const resourcesToFetch = getResourcesToFetch(project);\n\n  return PromisePool.withConcurrency(50)\n    .for(resourceNames)\n    .process(async resourceName => {\n      const resource = resourcesManager.getResource(resourceName);\n\n      const url = resource.getFile();\n      const extension = path.extname(url);\n      const filenameWithoutExtension = path.basename(url, extension);\n      const name = newNameGenerator(filenameWithoutExtension, name => {\n        const tentativePath = path.join(baseAssetsPath, name) + extension;\n        return (\n          fs.existsSync(tentativePath) || downloadedFilePaths.has(tentativePath)\n        );\n      });\n      const newPath = path.join(baseAssetsPath, name) + extension;\n      downloadedFilePaths.add(newPath);\n\n      try {\n        await retryIfFailed({ times: 2 }, async () => {\n          await fs.ensureDir(baseAssetsPath);\n          await ipcRenderer.invoke('local-file-download', url, newPath);\n          resource.setFile(\n            path.relative(projectPath, newPath).replace(/\\\\/g, '/')\n          );\n          fetchedResources.push({ resourceName });\n        });\n      } catch (error) {\n        erroredResources.push({ resourceName, error });\n      }\n\n      onProgress(fetchedResourcesCount++, resourcesToFetch.length);\n    })\n    .then(() => ({\n      fetchedResources,\n      erroredResources,\n    }));\n};\n\nexport const LocalResourceFetcher: ResourceFetcher = {\n  getResourcesToFetch,\n  fetchResources,\n};\n","// @flow\nimport React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ExportDialog from './Export/ExportDialog';\nimport CreateProjectDialog from './ProjectCreation/CreateProjectDialog';\nimport Authentication from './Utils/GDevelopServices/Authentication';\nimport './UI/icomoon-font.css'; // Styles for Icomoon font.\n\n// Import for Electron powered IDE.\nimport localResourceSources from './ResourcesList/LocalResourceSources';\nimport localResourceExternalEditors from './ResourcesList/LocalResourceExternalEditors';\nimport LocalPreviewLauncher from './Export/LocalExporters/LocalPreviewLauncher';\nimport {\n  localAutomatedExporters,\n  localManualExporters,\n  localOnlineWebExporter,\n} from './Export/LocalExporters';\nimport ElectronMainMenu from './MainFrame/ElectronMainMenu';\nimport makeExtensionsLoader from './JsExtensionsLoader/LocalJsExtensionsLoader';\nimport { makeLocalEventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport Providers from './MainFrame/Providers';\nimport LocalEventsFunctionsExtensionWriter from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter';\nimport LocalEventsFunctionsExtensionOpener from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport LocalFileStorageProvider from './ProjectsStorage/LocalFileStorageProvider';\nimport { LocalGDJSDevelopmentWatcher } from './GameEngineFinder/LocalGDJSDevelopmentWatcher';\nimport { LocalResourceFetcher } from './ProjectsStorage/ResourceFetcher/LocalResourceFetcher';\nimport {\n  onCreateFromExampleShortHeader,\n  onCreateBlank,\n} from './ProjectCreation/services/LocalCreation';\n\nconst gd: libGDevelop = global.gd;\n\nexport const create = (authentication: Authentication) => {\n  Window.setUpContextMenu();\n\n  const appArguments = Window.getArguments();\n  const isDev = Window.isDev();\n\n  return (\n    <Providers\n      authentication={authentication}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeLocalEventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={LocalEventsFunctionsExtensionWriter}\n      eventsFunctionsExtensionOpener={LocalEventsFunctionsExtensionOpener}\n      resourceFetcher={LocalResourceFetcher}\n    >\n      {({ i18n }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={\n            // Add Url provider\n            [LocalFileStorageProvider]\n          }\n          defaultStorageProvider={LocalFileStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <MainFrame\n              i18n={i18n}\n              renderMainMenu={props => <ElectronMainMenu {...props} />}\n              renderPreviewLauncher={(props, ref) => (\n                <LocalPreviewLauncher {...props} ref={ref} />\n              )}\n              renderExportDialog={props => (\n                <ExportDialog\n                  project={props.project}\n                  onSaveProject={props.onSaveProject}\n                  onChangeSubscription={props.onChangeSubscription}\n                  onClose={props.onClose}\n                  automatedExporters={localAutomatedExporters}\n                  manualExporters={localManualExporters}\n                  onlineWebExporter={localOnlineWebExporter}\n                />\n              )}\n              renderCreateDialog={props => (\n                <CreateProjectDialog\n                  open={props.open}\n                  onClose={props.onClose}\n                  onOpen={props.onOpen}\n                  initialTab={props.initialTab}\n                  onCreateBlank={onCreateBlank}\n                  onCreateFromExampleShortHeader={\n                    onCreateFromExampleShortHeader\n                  }\n                />\n              )}\n              renderGDJSDevelopmentWatcher={\n                isDev ? () => <LocalGDJSDevelopmentWatcher /> : null\n              }\n              onCreateFromExampleShortHeader={onCreateFromExampleShortHeader}\n              onCreateBlank={onCreateBlank}\n              storageProviders={storageProviders}\n              getStorageProviderOperations={getStorageProviderOperations}\n              getStorageProvider={getStorageProvider}\n              resourceSources={localResourceSources}\n              resourceExternalEditors={localResourceExternalEditors}\n              extensionsLoader={makeExtensionsLoader({\n                gd,\n                objectsEditorService: ObjectsEditorService,\n                objectsRenderingService: ObjectsRenderingService,\n                filterExamples: !isDev,\n              })}\n              initialFileMetadataToOpen={initialFileMetadataToOpen}\n            />\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n};\n","import optionalRequire from '../../Utils/OptionalRequire';\nimport { getUID } from '../../Utils/LocalUserInfo';\nvar fs = optionalRequire('fs-extra');\nvar path = optionalRequire('path');\nvar os = optionalRequire('os');\nconst gd /* TODO: add flow in this file */ = global.gd;\n\n/**\n * Gives access to the local filesystem, but returns paths\n * that are using \"/\" as a path separator, even on Windows\n * (so that in exported games, paths are slashs, which is\n * supported everywhere).\n */\nconst LocalFileSystem = {\n  mkDir: function(path) {\n    try {\n      fs.mkdirsSync(path);\n    } catch (e) {\n      console.error('mkDir(' + path + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  dirExists: function(path) {\n    return fs.existsSync(path);\n  },\n  clearDir: function(path) {\n    try {\n      fs.emptyDirSync(path);\n    } catch (e) {\n      console.error('clearDir(' + path + ') failed: ' + e);\n    }\n  },\n  getTempDir: function() {\n    return path.join(os.tmpdir(), `GDTMP-${getUID()}`);\n  },\n  fileNameFrom: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return fullPath;\n\n    fullPath = this._translateUrl(fullPath);\n    return path.basename(fullPath);\n  },\n  dirNameFrom: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return '';\n\n    fullPath = this._translateUrl(fullPath);\n    return path.dirname(fullPath).replace(/\\\\/g, '/');\n  },\n  makeAbsolute: function(filename, baseDirectory) {\n    if (this._isExternalUrl(filename)) return filename;\n\n    filename = this._translateUrl(filename);\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path\n      .resolve(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  },\n  makeRelative: function(filename, baseDirectory) {\n    if (this._isExternalUrl(filename)) return filename;\n\n    filename = this._translateUrl(filename);\n    return path\n      .relative(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  },\n  isAbsolute: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return true;\n\n    if (fullPath.length === 0) return true;\n    fullPath = this._translateUrl(fullPath);\n    return (\n      (fullPath.length > 0 && fullPath.charAt(0) === '/') ||\n      (fullPath.length > 1 && fullPath.charAt(1) === ':')\n    );\n  },\n  copyFile: function(source, dest) {\n    //URL are not copied.\n    if (this._isExternalUrl(source)) return true;\n\n    source = this._translateUrl(source);\n    try {\n      if (source !== dest) fs.copySync(source, dest);\n    } catch (e) {\n      console.error('copyFile(' + source + ', ' + dest + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  writeToFile: function(file, contents) {\n    try {\n      fs.outputFileSync(file, contents);\n    } catch (e) {\n      console.error('writeToFile(' + file + ', ...) failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  readFile: function(file) {\n    try {\n      var contents = fs.readFileSync(file);\n      return contents.toString();\n    } catch (e) {\n      console.error('readFile(' + file + ') failed: ' + e);\n      return '';\n    }\n  },\n  readDir: function(path, ext) {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n    try {\n      var files = [];\n      if (fs.existsSync(path)) {\n        files = fs.readdirSync(path);\n        files.forEach(function(file) {\n          if (\n            ext.length === 0 ||\n            file.toUpperCase().indexOf(ext, file.length - ext.length) !== -1\n          ) {\n            output.push_back(path + '/' + file);\n          }\n        });\n      }\n    } catch (e) {\n      console.error('readDir(' + path + ',' + ext + ') failed: ' + e);\n    }\n\n    return output;\n  },\n  fileExists: function(filename) {\n    filename = this._translateUrl(filename);\n    try {\n      const stat = fs.statSync(filename);\n      return stat.isFile();\n    } catch (e) {\n      return false;\n    }\n  },\n  _isExternalUrl: function(filename) {\n    return (\n      filename.startsWith('http://') ||\n      filename.startsWith('https://') ||\n      filename.startsWith('ftp://') ||\n      filename.startsWith('blob:') ||\n      filename.startsWith('data:')\n    );\n  },\n  /**\n   * Return the filename associated to the URL on the server, relative to the games directory.\n   * (i.e: Transform g/mydirectory/myfile.png to mydirectory/myfile.png).\n   */\n  _translateUrl: function(filename) {\n    // TODO: remove\n    if (filename.substr(0, 2) === 'g/' || filename.substr(0, 2) === 'g\\\\')\n      filename = filename.substr(2);\n\n    return filename;\n  },\n};\n\nexport default LocalFileSystem;\n","// @flow\n\nimport optionalRequire from './OptionalRequire';\nimport optionalLazyRequire from '../Utils/OptionalLazyRequire';\nconst fs = optionalRequire('fs');\nconst lazyRequireArchiver = optionalLazyRequire('archiver');\n\n// TODO: Move in a Archiver folder?\n/**\n * Archive the given folder to a file. Only available when running on Electron runtime.\n */\nexport const archiveLocalFolder = ({\n  path,\n  outputFilename,\n  sizeLimit,\n}: {|\n  path: string,\n  outputFilename: string,\n  sizeLimit?: number,\n|}): Promise<string> => {\n  const archiver = lazyRequireArchiver();\n  return new Promise((resolve, reject) => {\n    if (!fs || !archiver) return reject(new Error('Archiver unavailable'));\n\n    const output = fs.createWriteStream(outputFilename);\n    const archive = archiver('zip', {\n      zlib: { level: 9 }, // Sets the compression level.\n    });\n\n    output.on('close', () => {\n      const fileSize = archive.pointer();\n      console.log(\n        `Archive written at ${outputFilename}, ${fileSize}} total bytes.`\n      );\n      if (sizeLimit && fileSize > sizeLimit) {\n        const roundFileSizeInMb = Math.round(fileSize / (1000 * 1000));\n        reject(\n          new Error(\n            `Archive is of size ${roundFileSizeInMb} MB, which is above the limit allowed of ${sizeLimit /\n              (1000 * 1000)} MB.`\n          )\n        );\n      }\n      resolve(outputFilename);\n    });\n\n    archive.on('error', err => {\n      reject(err);\n    });\n\n    archive.pipe(output);\n\n    archive.directory(path, false);\n\n    archive.finalize();\n  });\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadLocalFile = (\n  localFilePath: string,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  if (!ipcRenderer) return Promise.reject('No support for local file upload');\n\n  ipcRenderer.removeAllListeners('local-file-upload-progress');\n  ipcRenderer.removeAllListeners('local-file-upload-done');\n\n  return new Promise((resolve, reject) => {\n    ipcRenderer.on(\n      'local-file-upload-progress',\n      (event, stepCurrentProgress, stepMaxProgress) => {\n        onProgress(stepCurrentProgress, stepMaxProgress);\n      }\n    );\n    ipcRenderer.on('local-file-upload-done', (event, err) => {\n      if (err) return reject(err);\n      resolve();\n    });\n    ipcRenderer.send('local-file-upload', localFilePath, uploadOptions);\n  });\n};\n"],"sourceRoot":""}